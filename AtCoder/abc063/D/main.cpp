#include <bits/stdc++.h>
using namespace std;

#define all(v) (v).begin(),(v).end()

long long a;
long long b;
vector<long long> vec;

bool check(long long mid) {
    long long tmp = 0;
    long long diff = a - b;
    for (int i=0; i<sizeof(vec); i++) {
        long long rem = vec[i] - b*mid;
        if (rem > 0) tmp += (rem + (diff-1)) / diff;
    }
    // mid以下の回数で済むならTrue
    return tmp <= mid;
}

long long binary_search(long long ok, long long ng) {
    while (abs(ok - ng) > 1) {
        long long mid = (ok + ng) / 2;
        if (check(mid)) ok = mid;
        else ng = mid;
    }
    return ok;
}

void solve(long long N, long long A, long long B, std::vector<long long> h){
    a = A;
    b = B;
    vec = h;
    
    long long max_ok = *max_element(all(vec)) / b + 1;
    cout << binary_search(max_ok, 0) << endl;
}

// Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main(){
    long long N;
    scanf("%lld",&N);
    long long A;
    scanf("%lld",&A);
    long long B;
    scanf("%lld",&B);
    std::vector<long long> h(N);
    for(int i = 0 ; i < N ; i++){
        scanf("%lld",&h[i]);
    }
    solve(N, A, B, std::move(h));
    return 0;
}
