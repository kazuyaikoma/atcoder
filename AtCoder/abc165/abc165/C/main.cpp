#include <bits/stdc++.h>
#define rep(i, n) for (int i=0; i<(n); i++)
using namespace std;

long long n, m, q;
vector<long long> A, B, C, D;
long long ans = 0;

void dfs(vector<long long> v) {
  if (v.size() == n) {
    long long now = 0;
    rep(i, q) if (v[B[i]-1] - v[A[i]-1] == C[i]) now += D[i];
    ans = max(ans, now);
    return;
  }

  v.push_back(v.back());
  while (v.back() <= m) {
    dfs(v);
    v.back()++;
  }
}

void solve(long long N, long long M, long long Q, std::vector<long long> a, std::vector<long long> b, std::vector<long long> c, std::vector<long long> d){
  n = N, m = M, q = Q;
  A = a; B = b, C = c, D = d;

  dfs(vector<long long>(1, 1));
  cout << ans << endl;
}

// Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main(){
    long long N;
    scanf("%lld",&N);
    long long M;
    scanf("%lld",&M);
    long long Q;
    scanf("%lld",&Q);
    std::vector<long long> a(Q);
    std::vector<long long> b(Q);
    std::vector<long long> c(Q);
    std::vector<long long> d(Q);
    for(int i = 0 ; i < Q ; i++){
        scanf("%lld",&a[i]);
        scanf("%lld",&b[i]);
        scanf("%lld",&c[i]);
        scanf("%lld",&d[i]);
    }
    solve(N, M, Q, std::move(a), std::move(b), std::move(c), std::move(d));
    return 0;
}
