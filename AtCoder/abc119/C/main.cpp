#include <bits/stdc++.h>
using namespace std;

long long ans = 1e9;
long long n;
vector<long long> len(3);
// now[i].firstが全長さ、now[i].secondが本数
// 3グループ + 未使用の1グループで構成し、探索中はそれぞれの値が常に変動する
vector<pair<long long, long long>> now(4, pair<long long, long long>(0, 0));

// それぞれの竹について深さ優先探索
void dfs(long long depth, vector<long long> &l) {
    if (depth < n) {
        for (int i=0; i<4; i++) {
            now[i].first += l[depth];
            now[i].second++;
            dfs(depth+1, l);
            now[i].first -= l[depth];
            now[i].second--;
        }
    } else {
        long long tmp = 0;
        for (int i=0; i<3; i++) {
            if (now[i].second == 0) return;
            tmp += abs(len[i] - now[i].first) + (now[i].second - 1) * 10;
        }
        ans = min(ans, tmp);
    }
}

void solve(long long N, long long A, long long B, long long C, std::vector<long long> l){
    n = N;
    len[0] = A;
    len[1] = B;
    len[2] = C;
    
    dfs(0, l);
    cout << ans << endl;
}

// Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main(){
    long long N;
    scanf("%lld",&N);
    long long A;
    scanf("%lld",&A);
    long long B;
    scanf("%lld",&B);
    long long C;
    scanf("%lld",&C);
    std::vector<long long> l(N);
    for(int i = 0 ; i < N ; i++){
        scanf("%lld",&l[i]);
    }
    solve(N, A, B, C, std::move(l));
    return 0;
}
